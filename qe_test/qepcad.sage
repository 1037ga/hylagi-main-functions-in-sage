load("common/utils.sage")


def solveWithParameters(consList, parList):
  qf = qepcad_formula
  vars = getVariables(consList)
  cons = qf.and_(consList, parList)
  resultCond = qepcad(qf.exists(vars, cons))
  print(resultCond)

def solveWithoutParameters(vars,consList):
  qf = qepcad_formula
  tm = cputime()
  print(vars)
  print(consList)
  resultCond = qepcad(qf.exists(vars, consList))
  print(resultCond)
  print("time:" + cputime(tm).__str__() + '\n')

x,y,z,t,p_x = var('x y z t p_x')
a,b,c,d,e,f = var('a b c d e f')
dx,ddx,dy,ddy = var('dx ddx dy ddy')

print("・2次方程式の解の存在条件")
print('1個以上')
solveWithoutParameters([x],[a*x^2 + b*x + c == 0, a != 0])
print('2個')
solveWithoutParameters([x,y],[a*x^2 + b*x + c == 0, a*y^2 + b*y + c == 0, x != y,a != 0])
print("・3次方程式の解の存在条件")
print("1個以上")
solveWithoutParameters([x],[a*x^3 + b*x^2 + c*x + d == 0, a != 0])
print("2個以上")
solveWithoutParameters([x,y],[a*x^3 + b*x^2 + c*x + d == 0, a*y^3 + b*y^2 + c*y + d == 0, x != y, a != 0])
print("3個")
solveWithoutParameters([x,y,z],[a*x^3 + b*x^2 + c*x + d == 0, a*y^3 + b*y^2 + c*y + d == 0, a*z^3 + b*z^2 + c*z + d == 0, x != y, y != z, z != x, a != 0])
print('・4次方程式の解の存在条件')
print("1個以上")
solveWithoutParameters([x],[a*x^4 + b*x^3 + c*x^2 + d*x + e == 0, a != 0])
print("・2元2次方程式")
print("yの存在範囲")
solveWithoutParameters([x],[2*x^2 + 4*x*y + 3*y^2 + 4*x + 5*y - 4 == 0])
print("xの存在範囲")
solveWithoutParameters([y],[2*x^2 + 4*x*y + 3*y^2 + 4*x + 5*y - 4 == 0])
print("x+yの最大値")
solveWithoutParameters([x,y],[2*x^2 + 4*x*y + 3*y^2 + 4*x + 5*y - 4 == 0, x + y == a])
print("・2元2次方程式(係数文字)")
print("文字5個")
solveWithoutParameters([x,y],[x^2 + a*x*y + b*y^2 + c*x + d*y + e == 0])
print("文字5個")
solveWithoutParameters([x,y],[a*x^2 + b*x*y + c*y^2 + d*x + e*y + 1 == 0])
print("解けない\n")
print("文字6個")
solveWithoutParameters([x,y],[a*x^2 + b*x*y + c*y^2 + d*x + e*y + f == 0])
print("解けない\n")
print("・ルートを含む方程式")
print("1元方程式(ルートの中に文字)")
# solveWithoutParameters([x],[x <= (a*x)^(1/2), x > 0, a > 0])
print([x])
print([x <= (a*x)^(1/2), x > 0, a > 0])
print("解けない\n")
print("上の式の両辺を2乗")
solveWithoutParameters([x],[x^2 <= a*x, x > 0,a > 0])
print("1元方程式(ルートの外に文字)")
# solveWithoutParameters([x],[(x)^(1/2) <= a*x, x > 0])
print([x])
print([(x)^(1/2) <= a*x, x > 0])
print("解けない\n")
# solveWithoutParameters([x],[(x)^(1/2) <= (x + y)^(1/2), x > 0])
print("解けない\n")
# solveWithoutParameters([x,y],[(x)^(1/2) + (y)^(1/2) <= (x + y)^(1/2), x > 0, y > 0])
print("解けない\n")
# solveWithoutParameters([x,y],[(x)^(1/2) + (y)^(1/2) <= a*(2*x + y)^(1/2), x > 0, y > 0])
print("解けない\n")



# tm = cputime()
# solveWithParameters([1<x, x<4, x==p_x], [2<p_x, p_x<5])
# print("time:" + cputime(tm).__str__())


# tm = cputime()
# solveWithParameters([x==1, x==p_x], [1<p_x, p_x<2])
# print("time:" + cputime(tm).__str__())

# tm = cputime()
# solveWithParameters([x==0, y==p_x, 1<x, x<2, y==0], [1<p_x, p_x<10])
# print("time:" + cputime(tm).__str__())
